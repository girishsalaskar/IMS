package com.ims.ui.common;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import com.ims.Program;
import com.ims.misc.Statics;
import com.ims.models.User;
import com.ims.models.data.UserData;
import com.jdev.girish.ui.iframe.IFrame;

/**
 *
 * @author Girish
 */
public class UpdateUser extends IFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4476117612946022732L;

	// Variables declaration - do not modify
	private JButton breset;

	private JButton bupdate;
	private JComboBox<String> cutype;
	private JScrollPane jspusers;
	private JLabel lmob;
	private JLabel luid;
	private JLabel luname;
	private JLabel lutype;
	private DefaultTableModel dtmuser;
	private JTable tblusers;
	private JTextField tmob;
	private JTextField tuid;
	private JTextField tuname;
	private UpdateUserListener listen;

	/**
	 * Creates new form UpdateUser
	 */
	public UpdateUser() {
		super(Program.LANG.getProperty("mniupdateuser"), 655, 250);
		listen = new UpdateUserListener();
		initComponents();
		
		//INFO Multilanguage Text
		luid.setText(Program.LANG.getProperty("lbluserid"));
		lutype.setText(Program.LANG.getProperty("lblusertype"));
		luname.setText(Program.LANG.getProperty("lblusername"));
		lmob.setText(Program.LANG.getProperty("lblcontactno"));
		breset.setText(Program.LANG.getProperty("btnreset"));
		bupdate.setText(Program.LANG.getProperty("btnsave"));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {

		luid = new JLabel();
		luname = new JLabel();
		lmob = new JLabel();
		tuid = new JTextField();
		tuname = new JTextField();
		tmob = new JTextField();
		bupdate = new JButton();
		breset = new JButton();
		cutype = new JComboBox<String>();
		lutype = new JLabel();
		jspusers = new JScrollPane();
		tblusers = new JTable();
		dtmuser = new DefaultTableModel(new Object[][] {}, new String[] {
				"User ID", "User Name", "Mobile Number", "Authority" }) {
			private static final long serialVersionUID = -2072561337449898510L;

			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};

		panel.setLayout(null);

		luid.setFont(Statics.NORMAL_LARGE_FONT);
		luid.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
		luid.setText("User ID");
		panel.add(luid);
		luid.setBounds(10, 10, 160, 30);

		luname.setFont(Statics.NORMAL_LARGE_FONT);
		luname.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
		luname.setText("User Name");
		panel.add(luname);
		luname.setBounds(10, 90, 160, 30);

		lmob.setFont(Statics.NORMAL_LARGE_FONT);
		lmob.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
		lmob.setText("Mobile Number");
		panel.add(lmob);
		lmob.setBounds(10, 130, 160, 30);

		tuid.setEditable(false);
		tuid.setFont(Statics.NORMAL_LARGE_FONT);
		panel.add(tuid);
		tuid.setBounds(170, 10, 200, 30);

		tuname.setFont(Statics.NORMAL_LARGE_FONT);
		panel.add(tuname);
		tuname.setBounds(170, 90, 200, 30);

		tmob.setFont(Statics.NORMAL_LARGE_FONT);
		panel.add(tmob);
		tmob.setBounds(170, 130, 200, 30);

		bupdate.setFont(Statics.NORMAL_LARGE_FONT);
		bupdate.setText("Save");
		panel.add(bupdate);
		bupdate.setBounds(10, 170, 170, 60);

		breset.setFont(Statics.NORMAL_LARGE_FONT);
		breset.setText("Reset");
		panel.add(breset);
		breset.setBounds(200, 170, 170, 60);

		cutype.setFont(Statics.NORMAL_LARGE_FONT);
		cutype.addItem("Simple User");
		cutype.addItem("Administrator");
		cutype.setSelectedIndex(-1);
		panel.add(cutype);
		cutype.setBounds(170, 50, 200, 30);

		lutype.setFont(Statics.NORMAL_LARGE_FONT);
		lutype.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
		lutype.setText("User Type");
		panel.add(lutype);
		lutype.setBounds(10, 50, 160, 30);

		jspusers.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

		tblusers.setAutoCreateRowSorter(true);
		tblusers.setModel(dtmuser);
		jspusers.setViewportView(tblusers);

		panel.add(jspusers);
		jspusers.setBounds(380, 10, 260, 220);

		updateTableData();

		tblusers.addKeyListener(listen);
		tblusers.addMouseListener(listen);

		breset.addActionListener(listen);
		bupdate.addActionListener(listen);
	}

	private void updateTableData() {
		UserData[] data = new User("").getAllUsers();
		if (data != null) {
			for (int i = 0; i < data.length; i++) {
				if (data[i].userid.equalsIgnoreCase("girish"))
					continue;
				dtmuser.setRowCount(i + 1);
				tblusers.setValueAt(data[i].userid, i, 0);
				tblusers.setValueAt(data[i].username, i, 1);
				tblusers.setValueAt(data[i].usermobile, i, 2);
				tblusers.setValueAt((data[i].userauth == 0 ? "Simple User"
						: "Administrator"), i, 3);
			}
			Statics.resizeColumnWidth(tblusers);
			int[] widths = { 70, 130, 100, 100 };
			Statics.customColumnWidth(tblusers, widths);
		}
	}

	private void initData() {
		if (tblusers.getSelectedRowCount() > 0) {
			tuid.setText(tblusers.getValueAt(tblusers.getSelectedRow(), 0)
					.toString());
			tuname.setText(tblusers.getValueAt(tblusers.getSelectedRow(), 1)
					.toString());
			tmob.setText(tblusers.getValueAt(tblusers.getSelectedRow(), 2)
					.toString());
			cutype.setSelectedItem(tblusers.getValueAt(
					tblusers.getSelectedRow(), 3).toString());
		}
	}

	private void resetFields() {
		tuname.setText("");
		cutype.setSelectedIndex(-1);
		tmob.setText("");
	}

	private class UpdateUserListener implements KeyListener, MouseListener,
			ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			if (e.getSource() == breset) {
				resetFields();
			}

			else if (e.getSource() == bupdate) {
				if (tuid.getText().equals("")) {
					Statics.showMessage(rootPane,
							"Please Select User from List",
							javax.swing.JOptionPane.ERROR_MESSAGE);
					tblusers.requestFocus();
					return;
				} else if (tuname.getText().equals("")) {
					Statics.showMessage(rootPane, "Please Enter User Name",
							javax.swing.JOptionPane.ERROR_MESSAGE);
					tuname.requestFocus();
					return;
				} else if (tmob.getText().equals("")) {
					Statics.showMessage(rootPane,
							"Please Enter User's Mobile Number!",
							javax.swing.JOptionPane.ERROR_MESSAGE);
					tmob.requestFocus();
					return;
				} else if (cutype.getSelectedIndex() < 0) {
					Statics.showMessage(rootPane, "Please Select User Type!",
							javax.swing.JOptionPane.ERROR_MESSAGE);
					cutype.requestFocus();
					return;
				} else {
					User user = new User(tuid.getText());
					if (user.updateUser(tuname.getText(), tmob.getText(),
							cutype.getSelectedIndex()) > 0)
						Statics.showMessage(rootPane,
								"User Information Updated Successfully!",
								javax.swing.JOptionPane.INFORMATION_MESSAGE);
					else
						Statics.showMessage(rootPane,
								"User Information not Updated Successfully!",
								javax.swing.JOptionPane.ERROR_MESSAGE);
					updateTableData();
					resetFields();
					tuid.setText("");
				}
			}
		}

		@Override
		public void keyReleased(KeyEvent e) {
			if (e.getSource() == tblusers) {
				if (e.getKeyCode() == KeyEvent.VK_UP
						|| e.getKeyCode() == KeyEvent.VK_DOWN) {
					initData();
				}
			}
		}

		@Override
		public void mouseClicked(MouseEvent e) {
			if (e.getSource() == tblusers)
				initData();
		}

		@Override
		public void keyPressed(KeyEvent e) {
			if (e.getSource() == tblusers)
				if (e.getKeyCode() == KeyEvent.VK_TAB)
					cutype.requestFocus();
		}

		@Override
		public void keyTyped(KeyEvent e) {
		}

		@Override
		public void mouseEntered(MouseEvent arg0) {
		}

		@Override
		public void mouseExited(MouseEvent arg0) {
		}

		@Override
		public void mousePressed(MouseEvent arg0) {
		}

		@Override
		public void mouseReleased(MouseEvent arg0) {
		}
	}
}